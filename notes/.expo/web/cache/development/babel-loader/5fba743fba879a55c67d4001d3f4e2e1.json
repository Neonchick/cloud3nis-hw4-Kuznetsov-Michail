{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(loadNotesSaga),\n    _marked2 = _regeneratorRuntime.mark(updateNotesSaga),\n    _marked3 = _regeneratorRuntime.mark(notesSaga);\n\nimport { takeEvery, put, call } from 'redux-saga/effects';\nimport * as api from \"../../lib/api-client\";\nimport { loadNotesFailure, loadNotesSuccess, types as t } from \"./actions\";\n\nfunction loadNotesSaga() {\n  var res, notes;\n  return _regeneratorRuntime.wrap(function loadNotesSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return api.getNotes();\n\n        case 3:\n          res = _context.sent;\n          notes = res.data;\n          _context.next = 7;\n          return put(loadNotesSuccess(notes));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put(loadNotesFailure(_context.t0.toString()));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction updateNotesSaga(notes) {\n  return _regeneratorRuntime.wrap(function updateNotesSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return api.updateNotes(notes);\n\n        case 3:\n          _context2.next = 9;\n          break;\n\n        case 5:\n          _context2.prev = 5;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 9;\n          return put(loadNotesFailure(_context2.t0.toString()));\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 5]]);\n}\n\nfunction notesSaga() {\n  return _regeneratorRuntime.wrap(function notesSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(t.LOAD_NOTES_REQUEST, loadNotesSaga);\n\n        case 2:\n          _context3.next = 4;\n          return takeEvery(t.LOAD_NOTES_REQUEST, loadNotesSaga);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default notesSaga;","map":{"version":3,"sources":["C:/source/HSE/Cross-PlatformApps/cloud3nis-hw4-Kuznetsov-Michail/notes/src/modules/notes/sagas.js"],"names":["loadNotesSaga","updateNotesSaga","notesSaga","takeEvery","put","call","api","loadNotesFailure","loadNotesSuccess","types","t","getNotes","res","notes","data","toString","updateNotes","LOAD_NOTES_REQUEST"],"mappings":";;uCAIUA,a;wCAWAC,e;wCAQAC,S;;AAvBV,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,OAAO,KAAKC,GAAZ;AACA,SAAQC,gBAAR,EAA0BC,gBAA1B,EAA4CC,KAAK,IAAIC,CAArD;;AAEA,SAAUV,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEoB,iBAAMM,GAAG,CAACK,QAAJ,EAAN;;AAFpB;AAEcC,UAAAA,GAFd;AAGcC,UAAAA,KAHd,GAGsBD,GAAG,CAACE,IAH1B;AAAA;AAKQ,iBAAMV,GAAG,CAACI,gBAAgB,CAACK,KAAD,CAAjB,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOQ,iBAAMT,GAAG,CAACG,gBAAgB,CAAC,YAAMQ,QAAN,EAAD,CAAjB,CAAT;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAUd,eAAV,CAA0BY,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMP,GAAG,CAACU,WAAJ,CAAgBH,KAAhB,CAAN;;AAFR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAIQ,iBAAMT,GAAG,CAACG,gBAAgB,CAAC,aAAMQ,QAAN,EAAD,CAAjB,CAAT;;AAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAUb,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMC,SAAS,CAACO,CAAC,CAACO,kBAAH,EAAuBjB,aAAvB,CAAf;;AADJ;AAAA;AAEI,iBAAMG,SAAS,CAACO,CAAC,CAACO,kBAAH,EAAuBjB,aAAvB,CAAf;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAeE,SAAf","sourcesContent":["import { takeEvery, put, call } from 'redux-saga/effects';\r\nimport * as api from '../../lib/api-client';\r\nimport {loadNotesFailure, loadNotesSuccess, types as t} from './actions';\r\n\r\nfunction* loadNotesSaga() {\r\n    try {\r\n        const res = yield api.getNotes();\r\n        const notes = res.data;\r\n\r\n        yield put(loadNotesSuccess(notes));\r\n    } catch (error) {\r\n        yield put(loadNotesFailure(error.toString()));\r\n    }\r\n}\r\n\r\nfunction* updateNotesSaga(notes) {\r\n    try {\r\n        yield api.updateNotes(notes);\r\n    } catch (error) {\r\n        yield put(loadNotesFailure(error.toString()));\r\n    }\r\n}\r\n\r\nfunction* notesSaga() {\r\n    yield takeEvery(t.LOAD_NOTES_REQUEST, loadNotesSaga);\r\n    yield takeEvery(t.LOAD_NOTES_REQUEST, loadNotesSaga);\r\n}\r\n\r\nexport default notesSaga;"]},"metadata":{},"sourceType":"module"}