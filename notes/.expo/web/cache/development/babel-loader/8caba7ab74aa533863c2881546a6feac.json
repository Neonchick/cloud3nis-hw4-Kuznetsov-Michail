{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(doFetch);\n\nvar END_POINT = 'http://localhost:3000';\nexport function doFetch(_ref) {\n  var method, url, data, fullPath, response;\n  return _regeneratorRuntime.wrap(function doFetch$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          method = _ref.method, url = _ref.url, data = _ref.data;\n          fullPath = END_POINT + url;\n          _context.prev = 2;\n          console.log(dofetch);\n          console.log(data);\n          _context.next = 7;\n          return fetch(fullPath, {\n            method: method,\n            body: JSON.stringify(data)\n          });\n\n        case 7:\n          response = _context.sent;\n          _context.next = 10;\n          return response.json();\n\n        case 10:\n          response = _context.sent;\n          return _context.abrupt(\"return\", {\n            data: response\n          });\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](2);\n          return _context.abrupt(\"return\", _context.t0);\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 14]]);\n}","map":{"version":3,"sources":["C:/source/HSE/Cross-PlatformApps/cloud3nis-hw4-Kuznetsov-Michail/notes/src/lib/do-fetch.js"],"names":["doFetch","END_POINT","method","url","data","fullPath","console","log","dofetch","fetch","body","JSON","stringify","response","json"],"mappings":";;uCAEiBA,O;;AAFjB,IAAMC,SAAS,GAAG,uBAAlB;AAEA,OAAO,SAAUD,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACHE,UAAAA,MADG,QACHA,MADG,EAEHC,GAFG,QAEHA,GAFG,EAGHC,IAHG,QAGHA,IAHG;AAMGC,UAAAA,QANH,GAMcJ,SAAS,GAAGE,GAN1B;AAAA;AASCG,UAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAVD;AAWgB,iBAAMK,KAAK,CAACJ,QAAD,EAAW;AACjCH,YAAAA,MAAM,EAAEA,MADyB;AAEjCQ,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf;AAF2B,WAAX,CAAX;;AAXhB;AAWKS,UAAAA,QAXL;AAAA;AAeY,iBAAMA,QAAQ,CAACC,IAAT,EAAN;;AAfZ;AAeCD,UAAAA,QAfD;AAAA,2CAiBQ;AAACT,YAAAA,IAAI,EAAES;AAAP,WAjBR;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["const END_POINT = 'http://localhost:3000';\r\n\r\nexport function* doFetch({\r\n    method,\r\n    url,\r\n    data,\r\n                         })\r\n{\r\n    const fullPath = END_POINT + url;\r\n\r\n    try {\r\n        console.log(dofetch)\r\n        console.log(data)\r\n        let response = yield fetch(fullPath, {\r\n            method: method,\r\n            body: JSON.stringify(data)\r\n        });\r\n        response = yield response.json()\r\n\r\n        return {data: response};\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}