{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { types as t } from \"./actions\";\nvar initialState = {\n  notes: new Map(),\n  isLoaded: false\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case t.CREATE_NOTE:\n    case t.EDIT_NOTE:\n      {\n        var note = action.note;\n        var newNotes = new Map(state.notes);\n        newNotes.set(note.id, note);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          notes: newNotes\n        });\n      }\n\n    case t.DELETE_NOTE:\n      {\n        var _note = action.note;\n        var newNotes = new Map(state.notes);\n        newNotes.delete(_note.id);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          notes: newNotes\n        });\n      }\n\n    case t.LOAD_NOTES_SUCCESS:\n      {\n        var notes = action.notes;\n        notes;\n        console.log(notes);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          notes: keyBy(notes, 'id'),\n          isLoaded: true\n        });\n      }\n\n    case t.LOAD_NOTES_FAILURE:\n      {\n        var error = action.error;\n        console.log('Failed to load');\n        console.log('Reason: ', error);\n        return state;\n      }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/source/HSE/Cross-PlatformApps/cloud3nis-hw4-Kuznetsov-Michail/notes/src/modules/notes/reducer.js"],"names":["types","t","initialState","notes","Map","isLoaded","state","action","type","CREATE_NOTE","EDIT_NOTE","note","newNotes","set","id","DELETE_NOTE","delete","LOAD_NOTES_SUCCESS","console","log","keyBy","LOAD_NOTES_FAILURE","error"],"mappings":";;;;;;AAAA,SAAQA,KAAK,IAAIC,CAAjB;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,IAAIC,GAAJ,EADU;AAEjBC,EAAAA,QAAQ,EAAE;AAFO,CAArB;AAKA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,CAAC,CAACQ,WAAP;AACA,SAAKR,CAAC,CAACS,SAAP;AAAkB;AACd,YAAQC,IAAR,GAAiBJ,MAAjB,CAAQI,IAAR;AACA,YAAIC,QAAQ,GAAG,IAAIR,GAAJ,CAAQE,KAAK,CAACH,KAAd,CAAf;AACAS,QAAAA,QAAQ,CAACC,GAAT,CAAaF,IAAI,CAACG,EAAlB,EAAsBH,IAAtB;AACA,+CAAYL,KAAZ;AAAmBH,UAAAA,KAAK,EAAES;AAA1B;AACH;;AACD,SAAKX,CAAC,CAACc,WAAP;AAAoB;AAChB,YAAQJ,KAAR,GAAiBJ,MAAjB,CAAQI,IAAR;AACA,YAAIC,QAAQ,GAAG,IAAIR,GAAJ,CAAQE,KAAK,CAACH,KAAd,CAAf;AACAS,QAAAA,QAAQ,CAACI,MAAT,CAAgBL,KAAI,CAACG,EAArB;AACA,+CAAYR,KAAZ;AAAmBH,UAAAA,KAAK,EAAES;AAA1B;AACH;;AACD,SAAKX,CAAC,CAACgB,kBAAP;AAA2B;AACvB,YAAQd,KAAR,GAAkBI,MAAlB,CAAQJ,KAAR;AACAA,QAAAA,KAAK;AACLe,QAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAZ;AACA,+CACOG,KADP;AAEIH,UAAAA,KAAK,EAAEiB,KAAK,CAACjB,KAAD,EAAQ,IAAR,CAFhB;AAGIE,UAAAA,QAAQ,EAAE;AAHd;AAKH;;AACD,SAAKJ,CAAC,CAACoB,kBAAP;AAA2B;AACvB,YAAQC,KAAR,GAAkBf,MAAlB,CAAQe,KAAR;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBG,KAAxB;AACA,eAAOhB,KAAP;AACH;;AACD;AACI,aAAOA,KAAP;AA/BR;AAiCH,CAlCD","sourcesContent":["import {types as t} from \"./actions\";\r\n\r\nconst initialState = {\r\n    notes: new Map(),\r\n    isLoaded: false,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case t.CREATE_NOTE: \r\n        case t.EDIT_NOTE: {\r\n            const { note } = action;\r\n            var newNotes = new Map(state.notes);\r\n            newNotes.set(note.id, note);\r\n            return { ...state, notes: newNotes };\r\n        }\r\n        case t.DELETE_NOTE: {\r\n            const { note } = action;\r\n            var newNotes = new Map(state.notes);\r\n            newNotes.delete(note.id);\r\n            return { ...state, notes: newNotes };\r\n        }\r\n        case t.LOAD_NOTES_SUCCESS: {\r\n            const { notes } = action;\r\n            notes\r\n            console.log(notes)\r\n            return {\r\n                ...state,\r\n                notes: keyBy(notes, 'id'),\r\n                isLoaded: true,\r\n            };\r\n        }\r\n        case t.LOAD_NOTES_FAILURE: {\r\n            const { error } = action;\r\n            console.log('Failed to load');\r\n            console.log('Reason: ', error);\r\n            return state;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}