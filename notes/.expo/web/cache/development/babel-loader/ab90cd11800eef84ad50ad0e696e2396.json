{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(loadNotesSaga),\n    _marked2 = _regeneratorRuntime.mark(updateNotesSaga),\n    _marked3 = _regeneratorRuntime.mark(createNoteSaga),\n    _marked4 = _regeneratorRuntime.mark(notesSaga);\n\nimport { takeEvery, put, call } from 'redux-saga/effects';\nimport * as api from \"../../lib/api-client\";\nimport { updateNotesFailure, loadNotesFailure, loadNotesSuccess, types as t } from \"./actions\";\n\nfunction loadNotesSaga() {\n  var res, notes;\n  return _regeneratorRuntime.wrap(function loadNotesSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return api.getNotes();\n\n        case 3:\n          res = _context.sent;\n          notes = res.data;\n          _context.next = 7;\n          return put(loadNotesSuccess(notes));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put(loadNotesFailure(_context.t0.toString()));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction updateNotesSaga(action) {\n  return _regeneratorRuntime.wrap(function updateNotesSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          console.log('saga');\n          console.log(action);\n          _context2.next = 5;\n          return api.updateNotes(action.notes);\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put(updateNotesFailure(_context2.t0.toString()));\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction createNoteSaga(action) {\n  return _regeneratorRuntime.wrap(function createNoteSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          console.log('saga cerate');\n          console.log(action);\n          _context3.next = 5;\n          return api.createNotes(action.note);\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put(updateNotesFailure(_context3.t0.toString()));\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction notesSaga() {\n  return _regeneratorRuntime.wrap(function notesSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(t.LOAD_NOTES_REQUEST, loadNotesSaga);\n\n        case 2:\n          _context4.next = 4;\n          return takeEvery(t.UPDATE_NOTES_REQUEST, updateNotesSaga);\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default notesSaga;","map":{"version":3,"sources":["C:/source/HSE/Cross-PlatformApps/cloud3nis-hw4-Kuznetsov-Michail/notes/src/modules/notes/sagas.js"],"names":["loadNotesSaga","updateNotesSaga","createNoteSaga","notesSaga","takeEvery","put","call","api","updateNotesFailure","loadNotesFailure","loadNotesSuccess","types","t","getNotes","res","notes","data","toString","action","console","log","updateNotes","createNotes","note","LOAD_NOTES_REQUEST","UPDATE_NOTES_REQUEST"],"mappings":";;uCAIUA,a;wCAWAC,e;wCAUAC,c;wCAUAC,S;;AAnCV,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,OAAO,KAAKC,GAAZ;AACA,SAAQC,kBAAR,EAA4BC,gBAA5B,EAA8CC,gBAA9C,EAAgEC,KAAK,IAAIC,CAAzE;;AAEA,SAAUZ,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEoB,iBAAMO,GAAG,CAACM,QAAJ,EAAN;;AAFpB;AAEcC,UAAAA,GAFd;AAGcC,UAAAA,KAHd,GAGsBD,GAAG,CAACE,IAH1B;AAAA;AAKQ,iBAAMX,GAAG,CAACK,gBAAgB,CAACK,KAAD,CAAjB,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOQ,iBAAMV,GAAG,CAACI,gBAAgB,CAAC,YAAMQ,QAAN,EAAD,CAAjB,CAAT;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAUhB,eAAV,CAA0BiB,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQC,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAHR;AAIQ,iBAAMX,GAAG,CAACc,WAAJ,CAAgBH,MAAM,CAACH,KAAvB,CAAN;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMQ,iBAAMV,GAAG,CAACG,kBAAkB,CAAC,aAAMS,QAAN,EAAD,CAAnB,CAAT;;AANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SAAUf,cAAV,CAAyBgB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQC,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAHR;AAIQ,iBAAMX,GAAG,CAACe,WAAJ,CAAgBJ,MAAM,CAACK,IAAvB,CAAN;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMQ,iBAAMlB,GAAG,CAACG,kBAAkB,CAAC,aAAMS,QAAN,EAAD,CAAnB,CAAT;;AANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SAAUd,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMC,SAAS,CAACQ,CAAC,CAACY,kBAAH,EAAuBxB,aAAvB,CAAf;;AADJ;AAAA;AAEI,iBAAMI,SAAS,CAACQ,CAAC,CAACa,oBAAH,EAAyBxB,eAAzB,CAAf;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAeE,SAAf","sourcesContent":["import { takeEvery, put, call } from 'redux-saga/effects';\r\nimport * as api from '../../lib/api-client';\r\nimport {updateNotesFailure, loadNotesFailure, loadNotesSuccess, types as t} from './actions';\r\n\r\nfunction* loadNotesSaga() {\r\n    try {\r\n        const res = yield api.getNotes();\r\n        const notes = res.data;\r\n\r\n        yield put(loadNotesSuccess(notes));\r\n    } catch (error) {\r\n        yield put(loadNotesFailure(error.toString()));\r\n    }\r\n}\r\n\r\nfunction* updateNotesSaga(action) {\r\n    try {\r\n        console.log('saga')\r\n        console.log(action)\r\n        yield api.updateNotes(action.notes);\r\n    } catch (error) {\r\n        yield put(updateNotesFailure(error.toString()));\r\n    }\r\n}\r\n\r\nfunction* createNoteSaga(action) {\r\n    try {\r\n        console.log('saga cerate')\r\n        console.log(action)\r\n        yield api.createNotes(action.note);\r\n    } catch (error) {\r\n        yield put(updateNotesFailure(error.toString()));\r\n    }\r\n}\r\n\r\nfunction* notesSaga() {\r\n    yield takeEvery(t.LOAD_NOTES_REQUEST, loadNotesSaga);\r\n    yield takeEvery(t.UPDATE_NOTES_REQUEST, updateNotesSaga);\r\n}\r\n\r\nexport default notesSaga;"]},"metadata":{},"sourceType":"module"}