{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(getNotes),\n    _marked2 = _regeneratorRuntime.mark(updateNotes),\n    _marked3 = _regeneratorRuntime.mark(createNote);\n\nimport { doFetch } from \"./do-fetch\";\nexport function getNotes() {\n  var requestParams;\n  return _regeneratorRuntime.wrap(function getNotes$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          requestParams = {\n            method: 'GET',\n            url: '/notes'\n          };\n          _context.next = 4;\n          return doFetch(requestParams);\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", _context.t0);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\nexport function updateNotes(notes) {\n  var requestParams;\n  return _regeneratorRuntime.wrap(function updateNotes$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          console.log('api');\n          console.log(JSON.stringify({\n            notes: notes\n          }));\n          requestParams = {\n            method: 'POST',\n            url: '/notes',\n            data: {\n              notes: notes\n            }\n          };\n          _context2.next = 6;\n          return doFetch(requestParams);\n\n        case 6:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          return _context2.abrupt(\"return\", _context2.t0);\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\nexport function createNote(note) {\n  var requestParams;\n  return _regeneratorRuntime.wrap(function createNote$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          console.log('api create');\n          console.log(JSON.stringify({\n            notes: notes\n          }));\n          requestParams = {\n            method: 'POST',\n            url: '/notes',\n            data: {\n              notes: notes\n            }\n          };\n          _context3.next = 6;\n          return doFetch(requestParams);\n\n        case 6:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          return _context3.abrupt(\"return\", _context3.t0);\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}","map":{"version":3,"sources":["C:/source/HSE/Cross-PlatformApps/cloud3nis-hw4-Kuznetsov-Michail/notes/src/lib/api-client.js"],"names":["getNotes","updateNotes","createNote","doFetch","requestParams","method","url","notes","console","log","JSON","stringify","data","note"],"mappings":";;uCAEiBA,Q;wCAaAC,W;wCAoBAC,U;;AAnCjB,SAASC,OAAT;AAEA,OAAO,SAAUH,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEOI,UAAAA,aAFP,GAEuB;AAClBC,YAAAA,MAAM,EAAE,KADU;AAElBC,YAAAA,GAAG,EAAE;AAFa,WAFvB;AAAA;AAOQ,iBAAMH,OAAO,CAACC,aAAD,CAAb;;AAPR;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaP,OAAO,SAAUH,WAAV,CAAsBM,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGCC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAe;AAAEJ,YAAAA,KAAK,EAAEA;AAAT,WAAf,CAAZ;AAEMH,UAAAA,aANP,GAMuB;AAClBC,YAAAA,MAAM,EAAE,MADU;AAElBC,YAAAA,GAAG,EAAE,QAFa;AAGlBM,YAAAA,IAAI,EAAE;AACFL,cAAAA,KAAK,EAAEA;AADL;AAHY,WANvB;AAAA;AAcQ,iBAAMJ,OAAO,CAACC,aAAD,CAAb;;AAdR;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBP,OAAO,SAAUF,UAAV,CAAqBW,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGCL,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAe;AAAEJ,YAAAA,KAAK,EAAEA;AAAT,WAAf,CAAZ;AAEMH,UAAAA,aANP,GAMuB;AAClBC,YAAAA,MAAM,EAAE,MADU;AAElBC,YAAAA,GAAG,EAAE,QAFa;AAGlBM,YAAAA,IAAI,EAAE;AACFL,cAAAA,KAAK,EAAEA;AADL;AAHY,WANvB;AAAA;AAcQ,iBAAMJ,OAAO,CAACC,aAAD,CAAb;;AAdR;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { doFetch } from \"./do-fetch\";\r\n\r\nexport function* getNotes() {\r\n    try {\r\n        const requestParams = {\r\n            method: 'GET',\r\n            url: '/notes',\r\n        }\r\n\r\n        return yield doFetch(requestParams);\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nexport function* updateNotes(notes) {\r\n    try {\r\n\r\n        console.log('api')\r\n        console.log(JSON.stringify({ notes: notes }))\r\n\r\n        const requestParams = {\r\n            method: 'POST',\r\n            url: '/notes', \r\n            data: {\r\n                notes: notes\r\n            }\r\n        }\r\n\r\n        return yield doFetch(requestParams);\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nexport function* createNote(note) {\r\n    try {\r\n\r\n        console.log('api create')\r\n        console.log(JSON.stringify({ notes: notes }))\r\n\r\n        const requestParams = {\r\n            method: 'POST',\r\n            url: '/notes', \r\n            data: {\r\n                notes: notes\r\n            }\r\n        }\r\n\r\n        return yield doFetch(requestParams);\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}